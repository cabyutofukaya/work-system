name: Laravel

on:
  push:
    branches:
      - release-develop
      - release-staging
      - master

jobs:

# TODO 開発中はCI実行時のテストを停止
#  test:
#
#    # release-developブランチの場合のみテストを行う
#    if: github.ref == 'refs/heads/release-develop'
#
#    runs-on: ubuntu-latest
#
#    steps:
#
#      # MySQL の起動とデータベースの作成
#      - name: Setup Database
#        run: |
#          sudo systemctl start mysql.service
#          mysql -uroot -h127.0.0.1 -proot -e 'CREATE DATABASE IF NOT EXISTS laravel_testing;'
#
#      # PHP環境設定
#      - name: Setup PHP
#        uses: shivammathur/setup-php@v2
#        with:
#          php-version: '8.0'
#
#      # チェックアウトアクション
#      - uses: actions/checkout@v2
#
#      # 本番サーバのためのアセットコンパイル
#      # デプロイ先ではnodeが利用できないためここで実行
#      - name: Use Node.js
#        uses: actions/setup-node@v2
#        with:
#          node-version: '14'
#          cache: npm
#      - run: npm ci
#      - run: npm run prod
#
#      # CI用の環境設定ファイルを設定
#      - name: Copy .env
#        run: php -r "file_exists('.env') || copy('.env.ci', '.env');"
#
#      # vendorをキャッシュ
#      - name: Cache vendor
#        id: cache-vendor
#        uses: actions/cache@v1
#        with:
#          path: vendor
#          key: ${{ runner.os }}-vendor-${{ hashFiles('**/composer.lock') }}
#      - name: Install Dependencies
#        if: steps.cache-vendor.outputs.cache-hit != 'true'
#        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist
#
#      # Laravel設定
#      - name: Generate key
#        run: php artisan key:generate
#      - name: Directory Permissions
#        run: chmod -R 777 storage bootstrap/cache
#
#      ### Featureテスト
#
#      # 機能テスト実行
#      #- name: Execute tests (Unit and Feature tests) via PHPUnit
#      #  run: vendor/bin/phpunit --stop-on-failure
#
#      ### Duskブラウザテスト
#
#      # 最新版Chromeをインストール
#      - name: Update google-chrome-stable
#        run: |
#          sudo apt update -y
#          sudo apt install -y google-chrome-stable
#          sudo apt install -y fonts-ipafont
#
#      # Chrome Driverをアップデートして実行
#      - name: Upgrade Chrome Driver
#        run: php artisan dusk:update --detect
#      - name: Start Chrome Driver
#        run: ./vendor/laravel/dusk/bin/chromedriver-linux &
#
#      # ローカル開発環境との共存のためport80でテストhttpサーバを起動する
#      - name: Run Laravel Server
#        #run: php artisan serve &
#        run: sudo php artisan serve --port=80 &
#
#      # Dusk実行
#      - name: Run Dusk Tests
#        run: php artisan dusk --verbose --debug
#
#      # エラー時にログ・スクリーンショットをartifactとして保存する
#      - name: Upload artifacts laravel-log
#        uses: actions/upload-artifact@master
#        if: failure()
#        with:
#          name: laravel-test-laravel-log
#          path: storage/logs/laravel.log
#      - name: Upload artifacts dusk-screenshots
#        uses: actions/upload-artifact@master
#        if: failure()
#        with:
#          name: laravel-test-failure-screenshots
#          path: tests/Browser/screenshots/
#      - name: Upload artifacts dusk-console
#        uses: actions/upload-artifact@master
#        if: failure()
#        with:
#          name: laravel-test-dusk-console
#          path: tests/Browser/console/

  deploy:

    runs-on: ubuntu-latest

    steps:

      # PHP環境設定
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'

      # チェックアウトアクション
      - uses: actions/checkout@v2

      # 本番サーバのためのアセットコンパイル
      # デプロイ先ではnodeが利用できないためここで実行
      - name: Use Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: npm
      - run: npm ci
      - run: npm run prod

      # アセットに変更があればコミットを作成してプッシュ
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add --force public/css/app.css* public/js/app.js* public/mix-manifest.json
          git diff --quiet && git diff --staged --quiet || git commit -a -m "GitHub Actionsによるアセットコンパイル" -m "npm run prod"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

      ### デプロイ

      # CI用の環境設定ファイルを設定
      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.ci', '.env');"

      # vendorをキャッシュ
      - name: Cache vendor
        id: cache-vendor
        uses: actions/cache@v1
        with:
          path: vendor
          key: ${{ runner.os }}-vendor-${{ hashFiles('**/composer.lock') }}
      - name: Install Dependencies
        if: steps.cache-vendor.outputs.cache-hit != 'true'
        run: composer install -q --no-ansi --no-interaction --no-scripts --no-suggest --no-progress --prefer-dist

      # SSHキー設定
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_rsa
          known_hosts: ${{ secrets.KNOWN_HOSTS }}

      # デプロイ実行
      - name: Deploy develop
        if: github.ref == 'refs/heads/release-develop'
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          vendor/bin/dep deploy develop
      - name: Deploy staging
        if: github.ref == 'refs/heads/release-staging'
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          vendor/bin/dep deploy staging
      - name: Deploy production
        if: github.ref == 'refs/heads/master'
        run: |
          eval "$(ssh-agent -s)"
          ssh-add ~/.ssh/id_rsa
          vendor/bin/dep deploy production

      # エラー時にログをartifactとして保存する
      - name: Upload artifacts
        uses: actions/upload-artifact@master
        if: failure()
        with:
          name: laravel-deploy-failure
          path: storage/logs/laravel.log