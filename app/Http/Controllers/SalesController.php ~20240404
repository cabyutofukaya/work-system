<?php

namespace App\Http\Controllers;

use App\Http\Requests\UpdateSale;
use App\Models\Notice;
use App\Models\User;
use Illuminate\Support\Facades\Auth;
use Inertia\Response;
use Inertia\ResponseFactory;
use App\Models\Billing;
use App\Models\BillingCategory;
use App\Models\BillingType;
use App\Models\BillingMonth;
use Illuminate\Http\Request;


class SalesController extends Controller
{
    /**
     * コントローラインスタンスの生成
     *
     * @return void
     */
    public function __construct()
    {
        $this->authorizeResource(Notice::class);
    }

    public function index()
    {
        return redirect('/sales/icts');
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Inertia\Response|\Inertia\ResponseFactory
     */
    public function type_index($type): Response|ResponseFactory
    {
        $sales_data = [];
     

        // $year_list = ['2018','2024','2025','2026','2027','2028','2029','2030','2031'];
        // $month_list = ['1','2','3','4','5','6','7','8','9','10','11','12'];
        // $category_id_list = ['14','15','16','17','18','19','20','21','22','23','24','25','26'];

        // foreach($year_list as $year){
        //     foreach($month_list as $month){
        //         foreach($category_id_list as $category_id){
        //             Billing::insert([
        //                 'year' => $year,
        //                 'month' => $month,
        //                 'category_id' => $category_id,
        //                 'budget' => 0,
        //                 'achievements' => 0,
        //                 'count' => 0,
        //                 'profit' => 0,
        //                 'created_at' => '2023-12-08 00:00:00',
        //                 'updated_at' => '2023-12-08 00:00:00',
        //             ]);
        //         }
        //     }
        // }


        // $year_list = config('billing.year');

        $select_year = [];
        for ($limit_year = date('Y', strtotime('-4 year')); $limit_year < date('Y', strtotime('+1 year')); $limit_year++) {
            array_push($select_year, (int) $limit_year);
        }

        $year_list = [];
        for ($limit_year = date('Y', strtotime('-4 year')); $limit_year <= date('Y', strtotime('+4 year')); $limit_year++) {
            array_push($year_list, (int) $limit_year);
        }


        $type_data = BillingType::where('name', '=', $type)->select('id', 'name')->first();

        $category_list = BillingCategory::where('type_id', '=', $type_data->id)->select('id', 'name', 'display_name')->get();

        foreach ($category_list as $category) {

            $sales_data[$category->name] = [];

            foreach ($year_list as $year) {

                $tmp = [];
                $tmp['year'] = $year;
                $tmp['category_id'] = $category->id;
                $tmp['category'] = $category->name;
                $tmp['category_name'] = $category->display_name;
                $tmp['budget'] = 0;
                $tmp['count'] = 0;
                $tmp['achievements'] = 0;
                $tmp['profit'] = 0;


                $billing_data = Billing::where([
                    'year' => $year,
                    'category_id' => $category->id,
                ])->get();

                foreach ($billing_data as $billing) {

                    $tmp['budget'] += $billing->budget;
                    $tmp['count'] += $billing->count;
                    $tmp['achievements'] += $billing->achievements;
                    $tmp['profit'] += $billing->profit;
                }

                if ($tmp['count'] == 0 || $tmp['achievements'] == 0) {
                    $tmp['tanka'] = '-';
                } else {
                    $tmp['tanka'] = round($tmp['achievements'] / $tmp['count']);
                }

                // $tmp['tanka'] = $tmp['achievements'];


                $sales_data[$category->name][$year] = $tmp;
            }
        }



        // $select_year = config('billing.select_year');


        $type_data_list = BillingType::get();
        $type_list = [];
        foreach ($type_data_list as $k => $tmp_type_data) {
            $type_list[$k] = $tmp_type_data->name;
        }

        $category_data_list = BillingCategory::where('type_id', '=', $type_data->id)->select('id', 'name', 'display_name')->get();

        $category_list = [];
        foreach ($category_data_list as $category) {
            $category_list[$category->name] = $category->display_name;
        }

        return inertia('SalesType', [
            'type' => $type_data->name,
            'type_list' => $type_list,
            'category_list' => $category_list,
            'sales_data' => $sales_data,
            'year_list' => $year_list,
            'select_year' => $select_year,
        ]);
    }

    public function category_index($category, $year): Response|ResponseFactory
    {
        $category_data = BillingCategory::where('name', '=', $category)->first();

        $yearDataList = Billing::where([
            'year' => $year,
            'category_id' => $category_data->id,
        ])->get();

        $last_year = $year - 1;
        $lastYearDataList = Billing::where([
            'year' => $last_year,
            'category_id' => $category_data->id,
        ])->get();

        $last_year_data = [];
        foreach ($lastYearDataList as $yearData) {
            $last_year_data[$yearData->month] = $yearData->achievements;
        }

        $data = [];
        foreach ($yearDataList as $yearData) {
            $tmp = [];
            $tmp['id'] = $yearData->id;
            $tmp['type'] = $yearData->type;
            $tmp['year'] = $yearData->year;
            $tmp['month'] = $yearData->month;

            $tmp['achievements'] = $yearData->achievements;
            $tmp['budget'] = $yearData->budget;
            $tmp['count'] = $yearData->count;

            $tmp['profit'] = $yearData->profit;

            //平均単価
            if($yearData->count == 0 || $yearData->achievements == 0){
                $tmp['average_price'] = '-';
            }else{
                $tmp['average_price'] = round($yearData->achievements / $yearData->count);
            }

            $last_year_achievements = $last_year_data[$yearData->month];
            //前年実績
            $tmp['last_year_achievements'] = $last_year_achievements;
            
           
         //予算比（額）
            $tmp['budget_compare_price'] = $yearData->achievements - $yearData->budget;
        
           
            //前年比（額)
            $tmp['last_month_compare_price'] = $yearData->achievements - $last_year_achievements;

            //予算比（率) 
            if($yearData->achievements == 0 || $yearData->budget == 0){
                $tmp['budget_compare_rate'] = '-';
            }else{
                // $tmp['budget_compare_rate'] = round(($yearData->budget / $yearData->achievements) * 100, 1);
                $tmp['budget_compare_rate'] = round(($yearData->achievements / $yearData->budget) * 100, 1);

            }

            //前年比（率)
            if($last_year_achievements == 0 || $yearData->achievements == 0){
                $tmp['last_month_compare_rate'] = '-';
            }else{
                $tmp['last_month_compare_rate'] = round(($yearData->achievements / $last_year_achievements) * 100, 1);
            }

            $data[$yearData->month] = $tmp;
        }

        //上半期
        $tmp = [];
        $tmp['budget'] = $data[7]['budget'] + $data[8]['budget'] + $data[9]['budget'] + $data[10]['budget'] + $data[11]['budget'] + $data[12]['budget'];
        $tmp['achievements'] = $data[7]['achievements'] + $data[8]['achievements'] + $data[9]['achievements'] + $data[10]['achievements'] + $data[11]['achievements'] + $data[12]['achievements'];
        $tmp['count'] = $data[7]['count'] + $data[8]['count'] + $data[9]['count'] + $data[10]['count'] + $data[11]['count'] + $data[12]['count'];
        $tmp['profit'] = $data[7]['profit'] + $data[8]['profit'] + $data[9]['profit'] + $data[10]['profit'] + $data[11]['profit'] + $data[12]['profit'];


        if($tmp['count'] == 0 || $tmp['achievements'] == 0){
            $tmp['average_price'] = '-';
        }else{
            $tmp['average_price'] = round($tmp['achievements'] / $tmp['count']);
        }

        $tmp['last_year_achievements'] = $data[7]['last_year_achievements'] + $data[8]['last_year_achievements'] + $data[9]['last_year_achievements'] + $data[10]['last_year_achievements'] + $data[11]['last_year_achievements'] + $data[12]['last_year_achievements'];
        $tmp['budget_compare_price'] = $data[7]['budget_compare_price'] + $data[8]['budget_compare_price'] + $data[9]['budget_compare_price'] + $data[10]['budget_compare_price'] + $data[11]['budget_compare_price'] + $data[12]['budget_compare_price'];
        $tmp['last_month_compare_price'] = $data[7]['last_month_compare_price'] + $data[8]['last_month_compare_price'] + $data[9]['last_month_compare_price'] + $data[10]['last_month_compare_price'] + $data[11]['last_month_compare_price'] + $data[12]['last_month_compare_price'];

        if($tmp['achievements'] == 0 || $tmp['budget'] == 0){
            $tmp['budget_compare_rate'] = '-';
        }else{
            // $tmp['budget_compare_rate'] = round(($tmp['budget'] / $tmp['achievements']) * 100, 1);
            $tmp['budget_compare_rate'] = round(($tmp['achievements'] / $tmp['budget']) * 100, 1);

        }

        if($tmp['last_year_achievements'] == 0 || $tmp['achievements'] == 0){
            $tmp['last_month_compare_rate'] = '-';
        }else{
            $tmp['last_month_compare_rate'] = round(($tmp['achievements'] / $tmp['last_year_achievements']) * 100, 1);
        }

        $data[101] = $tmp;

        //下半期
        $tmp = [];
        $tmp['budget'] = $data[1]['budget'] + $data[2]['budget'] + $data[3]['budget'] + $data[4]['budget'] + $data[5]['budget'] + $data[6]['budget'];
        $tmp['achievements'] = $data[1]['achievements'] + $data[2]['achievements'] + $data[3]['achievements'] + $data[4]['achievements'] + $data[5]['achievements'] + $data[6]['achievements'];
        $tmp['count'] = $data[1]['count'] + $data[2]['count'] + $data[3]['count'] + $data[4]['count'] + $data[5]['count'] + $data[6]['count'];
        $tmp['profit'] = $data[1]['profit'] + $data[2]['profit'] + $data[3]['profit'] + $data[4]['profit'] + $data[5]['profit'] + $data[6]['profit'];

        if($tmp['count'] == 0 || $tmp['achievements'] == 0){
           
            $tmp['average_price'] = '-';

        }else{
            $tmp['average_price'] = round($tmp['achievements'] / $tmp['count']);
        }

        $tmp['last_year_achievements'] = $data[1]['last_year_achievements'] + $data[2]['last_year_achievements'] + $data[3]['last_year_achievements'] + $data[4]['last_year_achievements'] + $data[5]['last_year_achievements'] + $data[6]['last_year_achievements'];
        $tmp['budget_compare_price'] = $data[1]['budget_compare_price'] + $data[2]['budget_compare_price'] + $data[3]['budget_compare_price'] + $data[4]['budget_compare_price'] + $data[5]['budget_compare_price'] + $data[6]['budget_compare_price'];
        $tmp['last_month_compare_price'] = $data[1]['last_month_compare_price'] + $data[2]['last_month_compare_price'] + $data[3]['last_month_compare_price'] + $data[4]['last_month_compare_price'] + $data[5]['last_month_compare_price'] + $data[6]['last_month_compare_price'];

        if($tmp['achievements'] == 0 || $tmp['budget'] == 0){
            $tmp['budget_compare_rate'] = '-';
        }else{
            // $tmp['budget_compare_rate'] = round(($tmp['budget'] / $tmp['achievements']) * 100, 1);
            $tmp['budget_compare_rate'] = round(($tmp['achievements'] / $tmp['budget']) * 100, 1);

        }

        if($tmp['last_year_achievements'] == 0 || $tmp['achievements'] == 0){
            $tmp['last_month_compare_rate'] = '-';
        }else{
            $tmp['last_month_compare_rate'] = round(($tmp['achievements'] / $tmp['last_year_achievements']) * 100, 1);
        }

        $data[102] = $tmp;

        //全期
        $tmp = [];
        $tmp['budget'] = $data[101]['budget'] + $data[102]['budget'];
        $tmp['achievements'] = $data[101]['achievements'] + $data[102]['achievements'];
        $tmp['count'] = $data[101]['count'] + $data[102]['count'];
        $tmp['profit'] = $data[101]['profit'] + $data[102]['profit'];


        if($tmp['count'] == 0 || $tmp['achievements'] == 0){
            $tmp['average_price'] = '-';

        }else{
            $tmp['average_price'] = round($tmp['achievements'] / $tmp['count']);
        }

        $tmp['last_year_achievements'] = $data[101]['last_year_achievements'] + $data[102]['last_year_achievements'];
        $tmp['budget_compare_price'] = $data[101]['budget_compare_price'] + $data[102]['budget_compare_price'];
        $tmp['last_month_compare_price'] = $data[101]['last_month_compare_price'] + $data[102]['last_month_compare_price'];

        if($tmp['achievements'] == 0 || $tmp['budget'] == 0){
            $tmp['budget_compare_rate'] = '-';
        }else{
            // $tmp['budget_compare_rate'] = round(($tmp['budget'] / $tmp['achievements']) * 100, 1);
            $tmp['budget_compare_rate'] = round(($tmp['achievements'] / $tmp['budget']) * 100, 1);

        }

        if($tmp['last_year_achievements'] == 0 || $tmp['achievements'] == 0){
            $tmp['last_month_compare_rate'] = '-';
        }else{
            $tmp['last_month_compare_rate'] = round(($tmp['achievements'] / $tmp['last_year_achievements']) * 100, 1);
        }

        // $tmp['budget_compare_rate'] = round(($tmp['budget'] / $tmp['achievements']) * 100, 1);
        // $tmp['last_month_compare_rate'] = round(($tmp['achievements'] / $tmp['last_year_achievements']) * 100, 1);

        // $tmp['profit'] = 0;
        $data[200] = $tmp;

        $type_data = BillingType::find($category_data->type_id);

        $year_list = [];
        for ($limit_year = date('Y', strtotime('-4 year')); $limit_year <= date('Y', strtotime('+2 year')); $limit_year++) {
            array_push($year_list, (int) $limit_year);
        }

        $month_sort_list = config('billing.month_sort_list');

    
        return inertia('SalesCategory', [
            'data' => $data,
            'year' => (int) $year,
            'category' => $category_data,
            'type' => $type_data,
            'year_list' => $year_list,
            'month_sort_list' => $month_sort_list,
            'user' => Auth::user(),
        ]);
    }

    public function get_month_data($category, $year, $month)
    {
        $category_data = BillingCategory::where('name', '=', $category)->first();

        $billing_data = Billing::where([
            'category_id' => $category_data->id,
            'year' => $year,
            'month' => $month,
        ])->first();

        echo json_encode($billing_data);
    }

    public function update_data(UpdateSale $request)
    {        
        Billing::where('id', $request->id)
            ->update([
                'budget' => $request->budget,
                'achievements' => $request->achievements,
                'count' => $request->count ?? 0,
                'profit' => $request->profit,
            ]);

        $category_data = BillingCategory::where('id', '=', $request->category)->first();
        $type_data = BillingType::where('id', '=', $category_data->type_id)->first();

        $url = '/sales/billing/' . $category_data->name . '/' . $request->year;
        
        return redirect($url);
    }



    public function store()
    {

        // $yearList = ['2014', '2015', '2016', '2017', '2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025'];
        // $monthList = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];

        dd('store');

        //年リスト作成
        $yearList = [];
        for ($year = 2010; $year <= 2040; $year++) {
            array_push($yearList, $year);
        }

        //月リスト作成
        $monthList = [];
        for ($month = 1; $month <= 12; $month++) {
            array_push($monthList, $month);
        }

        $category_list = BillingCategory::get();


        // $typeList = ['icts', 'tcd', 'bpd', 'wsd'];
        // $categoryList = ["bking", "goodlearning", "truckking", "hakken", "links", "jtbbokun", "taxi", "bus", "cbl", "tabinoashi_taxi", "tabinoashi_bus", "yakatafune", "kashikiribus"];

        foreach ($category_list as $category) {

            foreach ($yearList as $year) {

                foreach ($monthList as $month) {

                    $budget = rand('111111', '999999');
                    $achievements = rand('111111', '999999');
                    $count = rand('11', '99');

                    Billing::insert([
                        'category_id' => $category->id,
                        'year' => $year,
                        'month' => $month,
                        'budget' => $budget,
                        'achievements' => $achievements,
                        'count' => $count,
                    ]);
                }
            }
        }
    }


    public function category_store()
    {
        dd('category_store');

        $type_list = BillingCategory::get();

        $category_arr = config('billing.category_list');

        foreach ($category_arr as $type => $category_list) {
            foreach ($category_list as $name => $display_name) {
                BillingCategory::insert([
                    'type_id' => $type,
                    'display_name' => $display_name,
                    'name' => $name,
                ]);
            }
        }
    }

    public function category_month($category, $month)
    {
        $category_data = BillingCategory::where('name', '=', $category)->first();

        $monthDataList = Billing::where([
            'month' => $month,
            'category_id' => $category_data->id,
        ])->get();


        $sales_data = [];
        foreach ($monthDataList as $monthData) {
            $tmp = [];
            $tmp['id'] = $monthData->id;
            $tmp['type'] = $category_data->name;
            $tmp['year'] = $monthData->year;
            $tmp['month'] = $monthData->month;

            $tmp['achievements'] = $monthData->achievements;
            $tmp['budget'] = $monthData->budget;
            $tmp['count'] = $monthData->count;
            $tmp['profit'] = $monthData->profit;

            if($monthData->achievements == 0 || $monthData->count == 0){
                $tmp['tanka'] = '-';
            }else{
                $tmp['tanka'] = round($monthData->achievements / $monthData->count);
            }


            // //平均単価
            // $tmp['average_price'] = round($monthData->achievements / $monthData->count);

            // $last_year_achievements = $monthData[$monthData->month];
            // //前年実績
            // $tmp['last_year_achievements'] = $last_year_achievements;
            // //予算比（額）
            // $tmp['budget_compare_price'] = $monthData->budget - $monthData->achievements;
            // //前年比（額)
            // $tmp['last_month_compare_price'] = $monthData->achievements - $last_year_achievements;
            // //予算比（率) 
            // $tmp['budget_compare_rate'] = round(($monthData->budget / $monthData->achievements) * 100, 2);
            // //前年比（率)
            if($monthData->year - 1 <= 2018){
                $tmp['last_month_compare_rate'] = 0;
            }else{
                $last_year = $monthData->year - 1;
                if($monthData->achievements == 0 || $sales_data[$last_year]['achievements'] == 0){
                    $tmp['last_month_compare_rate'] = '-';

                }else{
                    $tmp['last_month_compare_rate'] = round(($monthData->achievements / $sales_data[$last_year]['achievements']) * 100, 2);
                }

            }

            $sales_data[$monthData->year] = $tmp;
        }

        $type_data = BillingType::find($category_data->type_id);

        $type_data_list = BillingType::get();
        $type_list = [];
        foreach ($type_data_list as $k => $tmp_type_data) {
            $type_list[$k] = $tmp_type_data->name;
        }

        $category_list = BillingCategory::where('type_id', '=', $type_data->id)->select('id', 'name', 'display_name')->get();


        $year_list = [];
        for ($limit_year = date('Y', strtotime('-4 year')); $limit_year <= date('Y', strtotime('+1 year')); $limit_year++) {
            array_push($year_list, (int) $limit_year);
        }

        $select_year = [];
        for ($limit_year = date('Y', strtotime('-4 year')); $limit_year < date('Y', strtotime('+1 year')); $limit_year++) {
            array_push($select_year, (int) $limit_year);
        }

        return inertia('SalesCategoryMonth', [
        // return inertia('Chart', [
            'type' => $type_data->name,
            'type_list' => $type_list,
            'category_list' => $category_list,
            'sales_data' => $sales_data,
            'year_list' => $year_list,
            'select_year' => $select_year,
            'category' => $category,
            'category_data' => $category_data,
            'month' => $month,
        ]);
    }
}
